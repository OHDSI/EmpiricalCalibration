// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gridLlApproximation
NumericVector gridLlApproximation(NumericVector& x, const DataFrame& parameters);
RcppExport SEXP _EmpiricalCalibration_gridLlApproximation(SEXP xSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(gridLlApproximation(x, parameters));
    return rcpp_result_gen;
END_RCPP
}
// samplePoissonMaxLrr
NumericVector samplePoissonMaxLrr(NumericVector groupSizes, int minimumEvents, int sampleSize, double nullMean, double nullSd);
RcppExport SEXP _EmpiricalCalibration_samplePoissonMaxLrr(SEXP groupSizesSEXP, SEXP minimumEventsSEXP, SEXP sampleSizeSEXP, SEXP nullMeanSEXP, SEXP nullSdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type groupSizes(groupSizesSEXP);
    Rcpp::traits::input_parameter< int >::type minimumEvents(minimumEventsSEXP);
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< double >::type nullMean(nullMeanSEXP);
    Rcpp::traits::input_parameter< double >::type nullSd(nullSdSEXP);
    rcpp_result_gen = Rcpp::wrap(samplePoissonMaxLrr(groupSizes, minimumEvents, sampleSize, nullMean, nullSd));
    return rcpp_result_gen;
END_RCPP
}
// sampleBinomialMaxLrr
NumericVector sampleBinomialMaxLrr(NumericVector groupSizes, double p, int minimumEvents, int sampleSize, double nullMean, double nullSd);
RcppExport SEXP _EmpiricalCalibration_sampleBinomialMaxLrr(SEXP groupSizesSEXP, SEXP pSEXP, SEXP minimumEventsSEXP, SEXP sampleSizeSEXP, SEXP nullMeanSEXP, SEXP nullSdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type groupSizes(groupSizesSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type minimumEvents(minimumEventsSEXP);
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< double >::type nullMean(nullMeanSEXP);
    Rcpp::traits::input_parameter< double >::type nullSd(nullSdSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleBinomialMaxLrr(groupSizes, p, minimumEvents, sampleSize, nullMean, nullSd));
    return rcpp_result_gen;
END_RCPP
}
// samplePoissonRegressionMaxLrr
NumericVector samplePoissonRegressionMaxLrr(NumericVector groupSizes, double z, int minimumEvents, int sampleSize);
RcppExport SEXP _EmpiricalCalibration_samplePoissonRegressionMaxLrr(SEXP groupSizesSEXP, SEXP zSEXP, SEXP minimumEventsSEXP, SEXP sampleSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type groupSizes(groupSizesSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type minimumEvents(minimumEventsSEXP);
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(samplePoissonRegressionMaxLrr(groupSizes, z, minimumEvents, sampleSize));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodNull
double logLikelihoodNull(const NumericVector& theta, const NumericVector& logRr, const NumericVector& seLogRr);
RcppExport SEXP _EmpiricalCalibration_logLikelihoodNull(SEXP thetaSEXP, SEXP logRrSEXP, SEXP seLogRrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logRr(logRrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type seLogRr(seLogRrSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodNull(theta, logRr, seLogRr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EmpiricalCalibration_gridLlApproximation", (DL_FUNC) &_EmpiricalCalibration_gridLlApproximation, 2},
    {"_EmpiricalCalibration_samplePoissonMaxLrr", (DL_FUNC) &_EmpiricalCalibration_samplePoissonMaxLrr, 5},
    {"_EmpiricalCalibration_sampleBinomialMaxLrr", (DL_FUNC) &_EmpiricalCalibration_sampleBinomialMaxLrr, 6},
    {"_EmpiricalCalibration_samplePoissonRegressionMaxLrr", (DL_FUNC) &_EmpiricalCalibration_samplePoissonRegressionMaxLrr, 4},
    {"_EmpiricalCalibration_logLikelihoodNull", (DL_FUNC) &_EmpiricalCalibration_logLikelihoodNull, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_EmpiricalCalibration(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
