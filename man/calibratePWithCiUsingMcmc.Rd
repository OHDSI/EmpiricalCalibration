% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/CiUsingMcmc.R
\name{calibratePWithCiUsingMcmc}
\alias{calibratePWithCiUsingMcmc}
\title{Compute p-value confidence intervals using MCMC}
\usage{
calibratePWithCiUsingMcmc(logRrNegatives, seLogRrNegatives, logRrPositives,
  seLogRrPositives, scale = c(0.1, 200), iter = 10000)
}
\arguments{
\item{logRrNegatives}{A numeric vector of effect estimates of the negative controls on the log
scale.}

\item{seLogRrNegatives}{The standard error of the log of the effect estimates of the negative
controls.}

\item{logRrPositives}{A numeric vector of effect estimates of the positive controls on the log
scale.}

\item{seLogRrPositives}{The standard error of the log of the effect estimates of the positive
controls.}

\item{scale}{A vector of two numbers representing the scale of the likelihood space
around the mean and standard deviation of the error distribution,
respecitively.}

\item{iter}{Number of iterations of the MCMC.}
}
\description{
Compute p-value confidence intervals using MCMC
}
\details{
This is an experimental function for computing the 95 percent confidence interval of a calibrated
p-value using Markov-Chain Monte Carlo (MCMC). This should give better estimates than the default
function when the standard deviation of the error distribution is close to zero.
}
\examples{
controls <- simulateControls()
p <- calibratePWithCiUsingMcmc(controls$logRr,
                               controls$seLogRr,
                               controls$logRr[1],
                               controls$seLogRr[1],
                               scale = c(0.05, 25),
                               iter = 10000)
mcmc <- attr(p, "mcmc")
mean(mcmc$acc)  # Acceptance rate
plot(ts(mcmc$chain[, 1]))  # Trace for the mean
plot(ts(mcmc$chain[, 2]))  # Trace for the precision
mean(mcmc$chain[, 1])
mean(mcmc$chain[, 2])
}

